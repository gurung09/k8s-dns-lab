---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS - Node Group definition with support for Cluster Autoscaler'

Parameters:

  NodeInstanceProfile:
    Type: String
    Description: "ARN of worker node instance profile"
    
  NodeNetworking:
    Type: String
    Default: "public"
    Description: "Define whether to enable public IP on worker node or not"
    AllowedValues:
    - "public"
    - "private"
  
  AllowedSshCidr:
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Define the CIDR block where proxy server will open its SSH port for.
    
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for worker nodes

  HostingSubnets:
    Type: String
    Description: Define the subnets on VPC for worker nodes, multiple Subnet Ids separated by comma subnet-123,subnet-456

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  NodeGPUSupport:
    Type: String
    Description: Choose whether to enable GPU support on worker nodes or not
    Default: "no"
    AllowedValues:
    - "yes"
    - "no"

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t2.medium

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 100 

  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 20

  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: ""
    Type: String
  
  AmiID:
    Description: AUTO GENERATED BY MAKE FILE, DO NOT CHANGE
    Default: /aws/service/eks/optimized-ami/K8S_IMAGE_KEY/recommended/image_id
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  
  MasterCaCert:
    Type: String
    Description: "Control plane certificate authority data"
    
  MasterEndpoint:
    Type: String
    Description: "The endpoint for your Kubernetes API server"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'EKS Cluster Configurations'
        Parameters:
        - ClusterName
        - MasterCaCert
        - MasterEndpoint

      - Label:
          default: 'VPC Configurations'
        Parameters:
        - HostingSubnets

      - Label:
          default: 'Worker Node Configuration'
        Parameters:
        - NodeNetworking
        - NodeGPUSupport
        - NodeAutoScalingGroupMinSize
        - NodeAutoScalingGroupMaxSize
        - NodeInstanceType
        - NodeVolumeSize
        - BootstrapArguments
        - NodeInstanceProfile
      
      - Label:
          default: "Worker Node Accessibility"
        Parameters:
        - KeyName
        - NodeSecurityGroup
        - AllowedSshCidr

Conditions:
  HasPublicIP:
    Fn::Equals:
      - !Ref NodeNetworking
      - "public"

Resources:

  NodeSecurityGroupSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasPublicIP
    Properties:
      CidrIp: !Ref AllowedSshCidr
      GroupId: !Ref NodeSecurityGroup
      Description: Allow SSH access from allowed CIDR range
      FromPort: 22
      ToPort: 22
      IpProtocol: TCP

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupMinSize
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier:
        Fn::Split:
        - ','
        - !Ref HostingSubnets
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-node"
        PropagateAtLaunch: true
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'true'
        PropagateAtLaunch: true
      - Key: auto-delete
        Value: "no"
        PropagateAtLaunch: true
      - Key: GPUSupport
        Value: !Ref NodeGPUSupport
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 5

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 
        Fn::If:
        - HasPublicIP
        - true
        - false
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref AmiID
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace
            
            /etc/eks/bootstrap.sh ${ClusterName} --apiserver-endpoint ${MasterEndpoint} --b64-cluster-ca ${MasterCaCert} --dns-cluster-ip 169.254.20.10 ${BootstrapArguments}

            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}
