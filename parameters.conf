# Use this config gile to override the default value of parameters 
# provided in the template
####################################################################
##              CLOUDFORMATION STACK CONFIGURATION                ##
####################################################################
StackName=k8s-dns-lab
StackRegion=eu-west-1
StackBucket=gresik
StackBucketRegion=us-east-1
StackBucketPrefix=cfn/templates

####################################################################
##                  EKS CLUSTER CONFIGURATION                     ##
####################################################################
# ClusterName pretty much descriptive, the name of the EKS cluster
# as it will appear in EKS console page
ClusterName=k8s-dns-lab

# Kubernetes version, supported version is 14,15,16,17
K8sVersion=17

####################################################################
##                     BASTION CONFIGURATION                      ##
####################################################################
# by default bastion is disabled, when bastion is disabled, no bastion
# EC2 instance will be created. Bastion host will not be created when
# proxy is enabled and NodeNetworking is set to public. The allowed 
# value is yes or no
EnableBastion=yes

# default bastion instance type is t2.nano, I believe bastion doesn't
# have to be powerfull. Therefore, the allowed instance types are
# - t1.micro
# - t2.nano
# - t2.micro
# - t2.small
# - t2.medium
#BastionInstanceType=t2.nano

####################################################################
##                      PROXY CONFIGURATION                       ##
####################################################################
# by default it proxy is disabled, when NodeNetworking is set to public
# no proxy server will be created.
EnableProxy=no


####################################################################
##                       EC2 ACCESSIBILITY                        ##
####################################################################
# To allow Bastion host to be accessible from a certain IP address
# or CIDR block. By default it will be accessible from everywhere
#AllowedSshCidr=0.0.0.0/0

# Both bastion host and Kubernetes worker node will use this key name
KeyName=rmaulan-testbed

####################################################################
##                  WORKER NODE CONFIGURATION                     ##
####################################################################
# Where worker node should reside, default is public. The allowed values
# are public or private
NodeNetworking=private

# Instance type of worker node, default is t3.medium
NodeInstanceType=t3a.medium

# Define the root volume size of worker node, the value cannot be 
# lower than 20 and default is 40 GB
NodeVolumeSize=40

# Enable GPU suppport on the instance, not all instance type support
# GPU make sure to enable this option when the instance type support
# GPU. allowed values are yes and no
NodeGPUSupport=no

# Arguments to pass to the bootstrap script. 
# See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
#BootstrapArguments=

# Define the minimun and desired number on worker node in auto scaling
# group. Autoscaling will not work unless Cluster Autoscaler was 
# configured in the cluster
NodeAutoScalingGroupMinSize=2

# Define the maximum allowed worker node allowed in an autoscaling group
# default is set to 100.
#NodeAutoScalingGroupMaxSize=100

####################################################################
##                       VPC CONFIGURATION                        ##
####################################################################
# There will be two CIDR range on the VPC, primary and secondary, on
# Primary there will be six subnets, 3 will have route to the internet
# via IGW and the other 3 will go to the internet via a single NAT
# gateway or load-balanced proxy servers. While on secondary CIDR, 
# all three additional subnets will reach to the internet via the same 
# single NAT gateway or load-balanced proxy servers. VPC endpoint 
# gateway or inteface can be enabled for EC2, ECR, S3 and STS, the 
# minimum and available for EKS worker node to be able to join the 
# cluster and operational.

# Define whether to create VPC endpoints for EC2, ECR, S3 and STS
# by default it is disabled. Allowed value is yes or no
EnableVPCEndpoint=no

# Define primary CIDR range for the VPC. This should be a valid private 
# (RFC 1918) CIDR range.
#PrimaryVpcCidr=10.123.0.0/16

# Define the first IP range on primary VPC CIDR for public subnet 
# where external load balancer and bastion host will reside
#PublicSubnet01Block=10.123.61.0/24

# Define the second IP range on primary VPC CIDR for public subnet 
# where external load balancer and bastion host will reside
#PublicSubnet02Block=10.123.62.0/24

# Define the third IP range on primary VPC CIDR for public subnet 
# where external load balancer and bastion host will reside
#PublicSubnet03Block=10.123.63.0/24

# Define the first IP range on primary VPC CIDR for private subnet
# where internal load balancer, worker node, pod networking
#PrivateSubnet01Block=10.123.64.0/18

# Define the second IP range on primary VPC CIDR for private subnet
# where internal load balancer, worker node, pod networking
#PrivateSubnet02Block=10.123.128.0/18

# Define the third IP range on primary VPC CIDR for private subnet
# where internal load balancer, worker node, pod networking
#PrivateSubnet03Block=10.123.192.0/18

# Define secondary CIDR range for the VPC. This should be a valid 
# private (RFC 1918) CIDR range
#SecondaryVpcCidr=100.64.0.0/16

# Define the first IP range on secondary VPC CIDR for private subnet for additional pod networking
#AdditionalSubnet01Block=100.64.0.0/18

# Define the second IP range on secondary VPC CIDR for private subnet for additional pod networking
#AdditionalSubnet02Block=100.64.64.0/18

# Define the third IP range on secondary VPC CIDR for private subnet for additional pod networking
#AdditionalSubnet03Block=100.64.128.0/18

